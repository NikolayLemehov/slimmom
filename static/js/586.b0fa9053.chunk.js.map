{"version":3,"file":"static/js/586.b0fa9053.chunk.js","mappings":"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","sources":["components/DiaryAddProductForm/DiaryFormValidation/DiaryFormValidation.jsx","components/InputField/InputField.styled.jsx","components/InputField/InputField.jsx","pages/RegistrationPage/Registration.styled.jsx","pages/RegistrationPage/RegistrationPage.jsx","utils/noop.js"],"sourcesContent":["import { FormErrorMessage } from '@chakra-ui/react';\n\nimport React from 'react';\n\nexport default function DiaryFormValidation({ text }) {\n  return (\n    <FormErrorMessage fontSize=\"8px\" m=\"0\" position=\"absolute\" top=\"70px\">\n      {text}\n    </FormErrorMessage>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const FormLabel = styled.label`\n  display: block;\n  position: relative;\n  height: 46px;\n\n  &:focus-within span {\n    bottom: 25px;\n\n    font-size: 12px;\n    color: #fc842d;\n\n    @media screen and (min-width: 768px) {\n      bottom: 32px;\n    }\n  }\n  @media screen and (min-width: 768px) {\n    height: 60px;\n  }\n`;\n\nexport const LabelName = styled.span`\n  position: absolute;\n  bottom: 8px;\n\n  font-family: 'Verdana';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.21;\n  letter-spacing: 0.04em;\n\n  color: #9b9faa;\n\n  transition: bottom 300ms ease, color 300ms ease, font-size 300ms ease;\n  z-index: 10;\n  @media screen and (min-width: 768px) {\n    bottom: 20px;\n  }\n`;\n\nexport const Input = styled.input`\n  position: absolute;\n  bottom: 0;\n\n  width: 100%;\n  /* padding-bottom: 0px; */\n\n  letter-spacing: 0.04em;\n\n  border-bottom: 1px solid #e0e0e0;\n\n  transition: border-color 300ms ease;\n\n  @media screen and (min-width: 768px) {\n    padding-bottom: 5px;\n  }\n\n  &:focus-within {\n    border-bottom: 1px solid #fc842d;\n    outline: none;\n  }\n\n  &:not(:placeholder-shown) {\n    border-bottom: 1px solid #fc842d;\n  }\n\n  &:not(:placeholder-shown) ~ span {\n    bottom: 25px;\n    color: #fc842d;\n\n    font-size: 12px;\n    @media screen and (min-width: 768px) {\n      bottom: 32px;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { FormLabel, LabelName, Input } from './InputField.styled';\n\nexport default function InputField({\n  labelName,\n  handlerEvent,\n  width,\n  right,\n  ...inputSetting\n}) {\n  return (\n    <>\n      <FormLabel style={(width = { width })}>\n        <Input onChange={handlerEvent} {...inputSetting} placeholder=\" \" />\n        <LabelName style={{ right: right }}>{labelName}</LabelName>\n      </FormLabel>\n    </>\n  );\n}\n\nInputField.propTypes = {\n  labelName: PropTypes.string,\n  handlerEvent: PropTypes.func.isRequired,\n  width: PropTypes.string,\n  right: PropTypes.number,\n};\n","import styled from '@emotion/styled';\nimport desktopMainBg from '../../assets/bg/desktopMainBg.png';\nimport tabletMainBg from '../../assets/bg/tabletMainBg.png';\n\nexport const BgImg = styled.div`\n  @media screen and (min-width: 768px) {\n    position: fixed;\n    top: 0;\n    right: 0;\n    z-index: -1;\n\n    width: 100vw;\n    height: 100vh;\n\n    background-image: url(${tabletMainBg});\n    background-repeat: no-repeat;\n    background-position: right bottom;\n    background-size: contain;\n  }\n\n  @media screen and (min-width: 1280px) {\n    background-image: url(${desktopMainBg});\n  }\n`;\n","import {Field, Form, Formik} from \"formik\";\nimport {\n  Box,\n  Button,\n  Flex, FormControl,\n  Heading,\n  VStack\n} from \"@chakra-ui/react\";\nimport InputField from \"../../components/InputField/InputField\";\nimport authOperations from \"../../redux/auth/authOperations\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useNavigate} from \"react-router-dom\";\nimport {BgImg} from \"./Registration.styled\";\nimport {customColors} from \"../../theme/colors\";\nimport * as Yup from \"yup\";\nimport {authSelectors} from \"../../redux/auth/authSelectors\";\nimport {noop} from \"../../utils/noop\";\nimport DiaryFormValidation from \"../../components/DiaryAddProductForm/DiaryFormValidation/DiaryFormValidation\";\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('This field is required'),\n  email: Yup.string()\n    .email('Invalid email')\n    .required('This field is required'),\n  password: Yup.string()\n    .min(5, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('This field is required'),\n});\n\nexport default function RegistrationPage() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const registrationLoading = useSelector(authSelectors.registrationLoading);\n  const initialValues = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  }\n  const onSubmit = (values) => {\n    const {email, password, name} = values;\n    dispatch(authOperations.register({email, password, username: name}))\n  }\n\n  return (\n    <>\n      <BgImg/>\n      <Flex\n        w={{xs: '100%', md: 'auto'}}\n        justify=\"flex-start\"\n        alignItems={{xs: 'flex-start', lg: 'center'}}\n        flexGrow='1'\n        pt={{xs: '38px', md: '150px'}}\n        pb={{xs: '50px', lg: '25px'}}\n      >\n        <Box\n          flexGrow='1'\n        >\n          <Heading\n            as='h1' size='xs' mb='34px'\n            w={{xs: '100%', md: 'auto'}}\n            textAlign={{xs: 'center', md: 'left'}}\n            color={customColors.sun[\"100\"]}\n            textTransform='uppercase'\n          >Registration</Heading>\n          <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\n            {() => (\n              <Form>\n                <VStack spacing={7} align=\"flex-start\" mb={{xs: '60px', lg: '60px'}}>\n\n                  <Field name=\"name\">{({field, form}) => (\n                    <Box w={{xs: '100%', md: '240px'}}>\n                      <FormControl isInvalid={form.errors.email && form.touched.email}>\n                        <InputField\n                          labelName=\"Name *\"\n                          type=\"text\"\n                          name=\"name\"\n                          handlerEvent={noop}\n                          // value={formik.values.name}\n                          required\n                          width=\"100%\"\n                          {...field}\n                        />\n                        <DiaryFormValidation text={form.errors.email}/>\n                      </FormControl>\n                    </Box>\n                  )}\n                  </Field>\n\n                  <Field name=\"email\">{({field, form}) => (\n                    <Box w={{xs: '100%', md: '240px'}}>\n                      <FormControl isInvalid={form.errors.email && form.touched.email}>\n                        <InputField\n                          labelName=\"Email *\"\n                          type=\"text\"\n                          name=\"email\"\n                          handlerEvent={noop}\n                          // value={formik.values.email}\n                          required\n                          width=\"100%\"\n                          {...field}\n                        />\n                        <DiaryFormValidation text={form.errors.email}/>\n                      </FormControl>\n                    </Box>\n                  )}\n                  </Field>\n                  <Field name=\"password\">{({field, form}) => (\n                    <Box w={{xs: '100%', md: '240px'}}>\n                      <FormControl isInvalid={form.errors.email && form.touched.email}>\n                        <InputField\n                          labelName=\"Password *\"\n                          type=\"password\"\n                          name=\"password\"\n                          handlerEvent={noop}\n                          // value={formik.values.password}\n                          required\n                          width=\"100%\"\n                          {...field}\n                        />\n                        <DiaryFormValidation text={form.errors.email}/>\n                      </FormControl>\n                    </Box>\n                  )}\n                  </Field>\n                </VStack>\n                <Flex\n                  gap={6}\n                  flexDirection={{xs: 'column', md: 'row'}}\n                  alignItems={{xs: 'center'}}\n                >\n                  <Button variant={'outline'} type=\"button\" onClick={() => navigate('/login')}>Login</Button>\n                  <Button variant={'primary'} type=\"submit\" isLoading={registrationLoading}>Register</Button>\n                </Flex>\n              </Form>\n            )}\n          </Formik>\n        </Box>\n      </Flex>\n    </>\n  );\n}\n","export const noop = () => {}\n"],"names":["DiaryFormValidation","text","fontSize","m","position","top","FormLabel","styled","LabelName","Input","InputField","labelName","handlerEvent","width","right","inputSetting","style","onChange","placeholder","BgImg","tabletMainBg","desktopMainBg","validationSchema","Yup","shape","name","min","max","required","email","password","RegistrationPage","dispatch","useDispatch","navigate","useNavigate","registrationLoading","useSelector","authSelectors","w","xs","md","justify","alignItems","lg","flexGrow","pt","pb","as","size","mb","textAlign","color","customColors","textTransform","initialValues","onSubmit","values","authOperations","username","spacing","align","field","form","isInvalid","errors","touched","type","noop","gap","flexDirection","variant","onClick","isLoading"],"sourceRoot":""}